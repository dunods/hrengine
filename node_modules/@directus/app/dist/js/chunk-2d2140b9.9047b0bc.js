(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2140b9"],{aeed:function(n,e,t){"use strict";t.r(e),e["default"]='---\npageClass: page-reference\n---\n\n# Relations\n\n<div class="two-up">\n<div class="left">\n\n> What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever\n> other structures you can think of. [Learn more about Relationships](/concepts/relationships/).\n\n</div>\n<div class="right">\n\n[[toc]]\n\n</div>\n</div>\n\n---\n\n## The Relation Object\n\n<div class="two-up">\n<div class="left">\n<div class="definitions">\n\n`id` **integer**\\\nPrimary key of the relation.\n\n`many_collection` **string**\\\nCollection on the "many" side of the relation.\n\n`many_field` **string**\\\nField on the "many" side of the relation.\n\n`one_collection` **string**\\\nCollection on the "one" side of the relation.\n\n`one_field` **string**\\\nField on the "one" side of the relation.\n\n`one_collection_field` **string**\\\nIn Many-to-Any type fields, this holds the field in the many collection that holds the name of the "one" collection.\n\n`one_allowed_collections` **string**\\\nIn Many-to-Any type fields, this holds a csv of collection names the user is allowed to use through the m2a relation.\n\n`junction_field` **string**\\\nFor Many-to-Many type fields, this holds the name of the field that "links" a many-to-one to a one-to-many, creating a many-to-many.\n\n</div>\n</div>\n<div class="right">\n\n```json\n{\n\t"id": 13,\n\t"many_collection": "articles",\n\t"many_field": "featured_image",\n\t"one_collection": "directus_files",\n\t"one_field": null,\n\t"one_collection_field": null,\n\t"one_allowed_collections": null,\n\t"junction_field": null\n}\n```\n\n</div>\n</div>\n\n---\n\n## List relations\n\nList all relations that exist in Directus.\n\n<div class="two-up">\n<div class="left">\n\n::: tip Permissions\n\nThe data returned in this endpoint will be filtered based on the user\'s permissions. For example, relations that apply\nto a collection that the current user doesn\'t have access to are stripped out.\n\n:::\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Returns\n\nAn array of up to [limit](/reference/api/query/#limit) [relation objects](#the-relation-object). If no items are\navailable, data will be an empty array.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /relations\nSEARCH /relations\n```\n\n[Learn more about SEARCH ->](/reference/api/introduction/#search-http-method)\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Query {\n\trelations: [directus_relations]\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\trelations {\n\t\tid\n\t\tmany_collection\n\t\tone_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Retrieve a relation\n\nList an existing relation by primary key.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Returns\n\nReturns the requested [relation object](#the-relation-object).\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /relations/:id\n```\n\n##### Example\n\n```\nGET /relations/15\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Query {\n\trelations_by_id(id: ID!): directus_relations\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\trelations_by_id(id: 15) {\n\t\tid\n\t\tmany_collection\n\t\tone_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Create a Relation\n\nCreate a new relation.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nA partial [relation object](#the-relation-object).\n\n### Returns\n\nReturns the [relation object](#the-relation-object) for the created relation.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPOST /relations\n```\n\n##### Example\n\n```json\n// POST /relations\n\n{\n\t"many_collection": "articles",\n\t"many_field": "featured_image",\n\t"one_collection": "directus_files"\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tcreate_relations_item(data: create_directus_relations_input!): directus_relations\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tcreate_relations_item(\n\t\tdata: { many_collection: "articles", many_field: "featured_image", one_collection: "directus_files" }\n\t) {\n\t\tid\n\t\tmany_collection\n\t\tone_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Create Multiple Relations\n\nCreate multiple new relations.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nAn array of partial [relation objects](#the-relation-object).\n\n### Returns\n\nReturns the [relation objects](#the-relation-object) for the created relations.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPOST /relations\n```\n\n##### Example\n\n```json\n// POST /relations\n\n[\n\t{\n\t\t"many_collection": "articles",\n\t\t"many_field": "featured_image",\n\t\t"one_collection": "directus_files"\n\t},\n\t{\n\t\t"many_collection": "articles",\n\t\t"many_field": "category",\n\t\t"one_collection": "categories"\n\t}\n]\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tcreate_relations_items(data: [create_directus_relations_input!]!): [directus_relations]\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tcreate_relations_items(\n\t\tdata: [\n\t\t\t{ many_collection: "articles", many_field: "featured_image", one_collection: "directus_files" }\n\t\t\t{ many_collection: "articles", many_field: "category", one_collection: "categories" }\n\t\t]\n\t) {\n\t\tid\n\t\tmany_collection\n\t\tone_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Update a Relation\n\nUpdate an existing relation.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nA partial [relation object](#the-relation-object).\n\n### Returns\n\nReturns the [relation object](#the-relation-object) for the created relation.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPATCH /relations/:id\n```\n\n##### Example\n\n```json\n// PATCH /relations/15\n\n{\n\t"one_field": "articles"\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tupdate_relations_item(id: ID!, data: update_directus_relations_input!): directus_relations\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tupdate_relations_item(id: 15, data: { one_field: "articles" }) {\n\t\tid\n\t\tmany_collection\n\t\tone_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Delete a Relation\n\nDelete an existing relation.\n\n<div class="two-up">\n<div class="left">\n\n### Returns\n\nEmpty body.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nDELETE /relations/:id\n```\n\n##### Example\n\n```\nDELETE /relations/15\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tdelete_relations_item(id: ID!): delete_one\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tdelete_relations_item(id: 15) {\n\t\tid\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Delete Multiple Relations\n\nDelete multiple existing relations.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\nAn array of relation primary keys.\n\n### Returns\n\nEmpty body.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nDELETE /relations\n```\n\n##### Example\n\n```json\n// DELETE /relations\n[15, 251, 810]\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tdelete_relations_items(ids: [ID!]!): delete_many\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tdelete_relations_items(ids: [15, 251, 810]) {\n\t\tids\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n'}}]);