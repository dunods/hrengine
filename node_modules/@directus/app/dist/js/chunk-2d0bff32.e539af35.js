(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0bff32"],{4066:function(n,t,e){"use strict";e.r(t),t["default"]="# Custom Layouts <small></small>\n\n> Custom Layouts allow for building new ways to view or interact with Items via the Collection Detail pages.\n> [Learn more about Layouts](/guides/layouts/).\n\n## 1. Setup the Boilerplate\n\nEvery layout is a standalone \"package\" that contains at least a metadata file and a Vue component. We recommend using\nthe following file structure:\n\n```\nsrc/\n\tindex.js\n\tlayout.vue\n```\n\n### src/index.js\n\n```js\nimport LayoutComponent from './layout.vue';\n\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\tcomponent: LayoutComponent,\n};\n```\n\n- `id` — The unique key for this layout. It is good practice to scope proprietary layouts with an author prefix.\n- `name` — The human-readable name for this layout.\n- `component` — A reference to your Vue component.\n\n::: tip TypeScript\n\nSee\n[the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/layouts/types.ts#L4-L9)\nfor more info on what can go into this object.\n\n:::\n\n### src/layout.vue\n\n```vue\n<template>\n\t<div>Collection: {{ collection }}</div>\n</template>\n\n<script>\nexport default {\n\tprops: {\n\t\tcollection: String,\n\t},\n};\n<\/script>\n```\n\nThe props you can use in an layout are:\n\n- `collection` — The current collection's name.\n- `selection` (sync) - Any currently selected items.\n- `layout-options` (sync) - The user's current saved layout options.\n- `layout-query` (sync) - The user's layout query parameters. (eg: sort, limit, etc)\n- `filters` (sync) - The user's currently active filters.\n- `search-query` (sync) - The user's current search query.\n\n#### Accessing the API from within your extension\n\nThe Directus App's Vue app instance provides a field called `system`, which can be injected into Vue components using\n[Vue's inject framework](https://v3.vuejs.org/guide/component-provide-inject.html). This `system` field contains\nfunctions to access [Pinia](https://pinia.esm.dev) stores, and more importantly, contains a property called `api`, which\nis an authenticated Axios instance. Here's an example of how to use it:\n\n```vue\n<template>\n\t<div>\n\t\t<div>Collection: {{ collection }}</div>\n\t\t<v-list>\n\t\t\t<v-list-item v-for=\"item in items\" v-bind:key=\"item.id\">\n\t\t\t\t{{ item }}\n\t\t\t</v-list-item>\n\t\t</v-list>\n\t\t<v-button v-on:click=\"logToConsole\">CLog items to console</v-button>\n\t</div>\n</template>\n<script>\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\titems: null,\n\t\t};\n\t},\n\tmethods: {\n\t\tlogToConsole: function () {\n\t\t\tconsole.log(this.items);\n\t\t},\n\t},\n\tinject: ['system'],\n\tmounted() {\n\t\t// log the system field so you can see what attributes are available under it\n\t\t// remove this line when you're done.\n\t\tconsole.log(this.system);\n\t\t// Get a list of all available collections to use with this module\n\t\tthis.system.api.get(`/items/${this.collection}`).then((res) => {\n\t\t\tthis.items = res;\n\t\t});\n\t},\n};\n<\/script>\n```\n\nIn the above example, you can see that:\n\n- The `system` field gets injected into the component and becomes available as an attribute of the component (ie\n  `this.system`)\n- When the component is mounted, it uses `this.system.api.get` to request a list of all available collections\n- The names of the collections are rendered into a list in the component's template\n- a button is added with a method the logs all the data for the collections to the console\n\nThis is just a basic example. A more efficient way to access and work with the list of collections would be to get an\ninstance of the `collectionsStore` using `system.useCollectionsStore()`, but that's beyond the scope of this guide\n\n## 2. Install Dependencies and Configure the Buildchain\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom layouts's Vue component must first be bundled into a single `index.js` file. We\nrecommend bundling your code using Rollup. To install this and the other development dependencies, run this command:\n\n```bash\nnpm i -D rollup @rollup/plugin-commonjs @rollup/plugin-node-resolve rollup-plugin-terser rollup-plugin-vue@5 vue-template-compiler\n```\n\nYou can then use the following Rollup configuration within `rollup.config.js`:\n\n```js\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport { terser } from 'rollup-plugin-terser';\nimport vue from 'rollup-plugin-vue';\n\nexport default {\n\tinput: 'src/index.js',\n\toutput: {\n\t\tformat: 'es',\n\t\tfile: 'dist/index.js',\n\t},\n\tplugins: [vue(), nodeResolve(), commonjs(), terser()],\n};\n```\n\n::: tip Building multiple extensions\n\nYou can export an array of build configurations, so you can bundle (or even watch) multiple extensions at the same time.\nSee the [Rollup configuration file documentation](https://rollupjs.org/guide/en/#configuration-files) for more info.\n\n:::\n\n## 3. Develop Your Custom Layout\n\nThe layout itself is simply a Vue component, which provides an blank canvas for creating anything you need.\n\n## 4. Build and Deploy\n\nTo build the layout for use within Directus, run:\n\n```bash\nnpx rollup -c\n```\n\nFinally, move the output from your layout's `dist` folder into your project's `/extensions/layouts/my-custom-layout`\nfolder. Keep in mind that the extensions directory is configurable within your env file, and may be located elsewhere.\n"}}]);