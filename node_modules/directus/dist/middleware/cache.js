"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cache_1 = __importDefault(require("../cache"));
const env_1 = __importDefault(require("../env"));
const async_handler_1 = __importDefault(require("../utils/async-handler"));
const get_cache_key_1 = require("../utils/get-cache-key");
const checkCacheMiddleware = async_handler_1.default(async (req, res, next) => {
    var _a, _b, _c;
    if (req.method.toLowerCase() !== 'get')
        return next();
    if (env_1.default.CACHE_ENABLED !== true)
        return next();
    if (!cache_1.default)
        return next();
    if (((_a = req.headers['cache-control']) === null || _a === void 0 ? void 0 : _a.includes('no-cache')) || ((_b = req.headers['Cache-Control']) === null || _b === void 0 ? void 0 : _b.includes('no-cache'))) {
        return next();
    }
    const key = get_cache_key_1.getCacheKey(req);
    const cachedData = await cache_1.default.get(key);
    if (cachedData) {
        // Set cache-control header, but only for the public role
        if (env_1.default.CACHE_AUTO_PURGE !== true && !!((_c = req.accountability) === null || _c === void 0 ? void 0 : _c.role) === false) {
            const expiresAt = await cache_1.default.get(`${key}__expires_at`);
            const maxAge = `max-age=${expiresAt - Date.now()}`;
            res.setHeader('Cache-Control', `public, ${maxAge}`);
        }
        else {
            // This indicates that the browser/proxy is allowed to cache, but has to revalidate with
            // the server before use. At this point, we don't include Last-Modified, so it'll always
            // recreate the local cache. This does NOT mean that cache is disabled all together, as
            // Directus is still pulling the value from it's internal cache.
            res.setHeader('Cache-Control', 'no-cache');
        }
        return res.json(cachedData);
    }
    else {
        return next();
    }
});
exports.default = checkCacheMiddleware;
