"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nanoid_1 = require("nanoid");
const run_1 = __importDefault(require("../../../database/migrations/run"));
const run_2 = __importDefault(require("../../../database/seeds/run"));
const env_1 = __importDefault(require("../../../env"));
const logger_1 = __importDefault(require("../../../logger"));
const get_schema_1 = require("../../../utils/get-schema");
async function bootstrap() {
    logger_1.default.info('Initializing bootstrap...');
    if ((await isDatabaseAvailable()) === false) {
        logger_1.default.error(`Can't connect to the database`);
        process.exit(1);
    }
    const { isInstalled, default: database } = require('../../../database');
    const { RolesService } = require('../../../services/roles');
    const { UsersService } = require('../../../services/users');
    const { SettingsService } = require('../../../services/settings');
    if ((await isInstalled()) === false) {
        logger_1.default.info('Installing Directus system tables...');
        await run_2.default(database);
        logger_1.default.info('Running migrations...');
        await run_1.default(database, 'latest');
        const schema = await get_schema_1.getSchema();
        logger_1.default.info('Setting up first admin role...');
        const rolesService = new RolesService({ schema });
        const role = await rolesService.createOne({ name: 'Admin', admin_access: true });
        logger_1.default.info('Adding first admin user...');
        const usersService = new UsersService({ schema });
        let adminEmail = env_1.default.ADMIN_EMAIL;
        if (!adminEmail) {
            logger_1.default.info('No admin email provided. Defaulting to "admin@example.com"');
            adminEmail = 'admin@example.com';
        }
        let adminPassword = env_1.default.ADMIN_PASSWORD;
        if (!adminPassword) {
            adminPassword = nanoid_1.nanoid(12);
            logger_1.default.info(`No admin password provided. Defaulting to "${adminPassword}"`);
        }
        await usersService.createOne({ email: adminEmail, password: adminPassword, role });
        if (env_1.default.PROJECT_NAME && typeof env_1.default.PROJECT_NAME === 'string' && env_1.default.PROJECT_NAME.length > 0) {
            const settingsService = new SettingsService({ schema });
            await settingsService.upsertSingleton({ project_name: env_1.default.PROJECT_NAME });
        }
    }
    else {
        logger_1.default.info('Database already initialized, skipping install');
        logger_1.default.info('Running migrations...');
        await run_1.default(database, 'latest');
    }
    logger_1.default.info('Done');
    process.exit(0);
}
exports.default = bootstrap;
async function isDatabaseAvailable() {
    const { hasDatabaseConnection } = require('../../../database');
    const tries = 5;
    const secondsBetweenTries = 5;
    for (let i = 0; i < tries; i++) {
        if (await hasDatabaseConnection()) {
            return true;
        }
        await new Promise((resolve) => setTimeout(resolve, secondsBetweenTries * 1000));
    }
    return false;
}
