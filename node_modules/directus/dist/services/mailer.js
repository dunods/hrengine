"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nodemailer_1 = __importDefault(require("nodemailer"));
const env_1 = __importDefault(require("../env"));
const logger_1 = __importDefault(require("../logger"));
let transporter = null;
if (env_1.default.EMAIL_TRANSPORT === 'sendmail') {
    transporter = nodemailer_1.default.createTransport({
        sendmail: true,
        newline: env_1.default.EMAIL_SENDMAIL_NEW_LINE || 'unix',
        path: env_1.default.EMAIL_SENDMAIL_PATH || '/usr/sbin/sendmail',
    });
}
else if (env_1.default.EMAIL_TRANSPORT.toLowerCase() === 'smtp') {
    let auth = false;
    if (env_1.default.EMAIL_SMTP_USER || env_1.default.EMAIL_SMTP_PASSWORD) {
        auth = {
            user: env_1.default.EMAIL_SMTP_USER,
            pass: env_1.default.EMAIL_SMTP_PASSWORD,
        };
    }
    transporter = nodemailer_1.default.createTransport({
        pool: env_1.default.EMAIL_SMTP_POOL,
        host: env_1.default.EMAIL_SMTP_HOST,
        port: env_1.default.EMAIL_SMTP_PORT,
        secure: env_1.default.EMAIL_SMTP_SECURE,
        auth: auth,
    });
}
else if (env_1.default.EMAIL_TRANSPORT.toLowerCase() === 'mailgun') {
    const mg = require('nodemailer-mailgun-transport');
    transporter = nodemailer_1.default.createTransport(mg({
        auth: {
            api_key: env_1.default.EMAIL_MAILGUN_API_KEY,
            domain: env_1.default.EMAIL_MAILGUN_DOMAIN,
        },
    }));
}
else {
    logger_1.default.warn('Illegal transport given for email. Check the EMAIL_TRANSPORT env var.');
}
if (transporter) {
    transporter.verify((error) => {
        if (error) {
            logger_1.default.warn(`Couldn't connect to email server.`);
            logger_1.default.warn(`Email verification error: ${error}`);
        }
        else {
            logger_1.default.info(`Email connection established`);
        }
    });
}
exports.default = transporter;
