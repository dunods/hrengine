import { Knex } from 'knex';
import { Column } from 'knex-schema-inspector/dist/types/column';
import { schemaInspector } from '../database';
import { ItemsService } from '../services/items';
import { PayloadService } from '../services/payload';
import { AbstractServiceOptions, Accountability, SchemaOverview, types } from '../types';
import { Field } from '../types/field';
export declare type RawField = DeepPartial<Field> & {
    field: string;
    type: typeof types[number];
};
export declare class FieldsService {
    knex: Knex;
    accountability: Accountability | null;
    itemsService: ItemsService;
    payloadService: PayloadService;
    schemaInspector: typeof schemaInspector;
    schema: SchemaOverview;
    constructor(options: AbstractServiceOptions);
    private get hasReadAccess();
    readAll(collection?: string): Promise<Field[]>;
    readOne(collection: string, field: string): Promise<Record<string, any>>;
    createField(collection: string, field: Partial<Field> & {
        field: string;
        type: typeof types[number] | null;
    }, table?: Knex.CreateTableBuilder): Promise<void>;
    updateField(collection: string, field: RawField): Promise<string>;
    /** @todo save accountability */
    deleteField(collection: string, field: string): Promise<void>;
    addColumnToTable(table: Knex.CreateTableBuilder, field: RawField | Field, alter?: Column | null): void;
}
