"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersService = void 0;
const argon2_1 = __importDefault(require("argon2"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const lodash_1 = require("lodash");
const cache_1 = __importDefault(require("../cache"));
const database_1 = __importDefault(require("../database"));
const env_1 = __importDefault(require("../env"));
const exceptions_1 = require("../exceptions");
const record_not_unique_1 = require("../exceptions/database/record-not-unique");
const logger_1 = __importDefault(require("../logger"));
const to_array_1 = require("../utils/to-array");
const authentication_1 = require("./authentication");
const items_1 = require("./items");
const mail_1 = require("./mail");
const settings_1 = require("./settings");
class UsersService extends items_1.ItemsService {
    constructor(options) {
        super('directus_users', options);
        this.knex = options.knex || database_1.default;
        this.accountability = options.accountability || null;
        this.service = new items_1.ItemsService('directus_users', options);
        this.schema = options.schema;
    }
    /**
     * User email has to be unique case-insensitive. This is an additional check to make sure that
     * the email is unique regardless of casing
     */
    async checkUniqueEmails(emails, excludeKey) {
        if (emails.length > 0) {
            const query = this.knex
                .select('email')
                .from('directus_users')
                .whereRaw(`LOWER(??) IN (${emails.map(() => '?')})`, ['email', ...emails]);
            if (excludeKey) {
                query.whereNot('id', excludeKey);
            }
            const results = await query;
            if (results.length > 0) {
                throw new record_not_unique_1.RecordNotUniqueException('email', {
                    collection: 'directus_users',
                    field: 'email',
                    invalid: results[0].email,
                });
            }
        }
    }
    /**
     * Check if the provided password matches the strictness as configured in
     * directus_settings.auth_password_policy
     */
    async checkPasswordPolicy(passwords) {
        const settingsService = new settings_1.SettingsService({
            schema: this.schema,
            knex: this.knex,
        });
        const { auth_password_policy: policyRegExString } = await settingsService.readSingleton({
            fields: ['auth_password_policy'],
        });
        if (policyRegExString) {
            const wrapped = policyRegExString.startsWith('/') && policyRegExString.endsWith('/');
            const regex = new RegExp(wrapped ? policyRegExString.slice(1, -1) : policyRegExString);
            for (const password of passwords) {
                if (regex.test(password) === false) {
                    throw new exceptions_1.FailedValidationException({
                        message: `Provided password doesn't match password policy`,
                        path: ['password'],
                        type: 'custom.pattern.base',
                        context: {
                            value: password,
                        },
                    });
                }
            }
        }
        return true;
    }
    /**
     * Create a new user
     */
    async createOne(data, opts) {
        const email = data.email.toLowerCase();
        await this.checkUniqueEmails([email]);
        return await this.service.createOne(data, opts);
    }
    /**
     * Create multiple new users
     */
    async createMany(data, opts) {
        const emails = data
            .map((payload) => payload.email)
            .filter((e) => e)
            .map((e) => e.toLowerCase());
        await this.checkUniqueEmails(emails);
        const passwords = data.map((payload) => payload.password).filter((pw) => pw);
        if (passwords.length > 0) {
            await this.checkPasswordPolicy(passwords);
        }
        return await this.service.createMany(data, opts);
    }
    async updateOne(key, data, opts) {
        var _a;
        const email = (_a = data.email) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (email) {
            await this.checkUniqueEmails([email], key);
        }
        if (data.password) {
            await this.checkPasswordPolicy([data.password]);
        }
        if ('tfa_secret' in data) {
            throw new exceptions_1.InvalidPayloadException(`You can't change the "tfa_secret" value manually.`);
        }
        return await this.service.updateOne(key, data, opts);
    }
    async updateMany(keys, data, opts) {
        var _a;
        const email = (_a = data.email) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (email) {
            await this.checkUniqueEmails([email]);
        }
        if (data.password) {
            await this.checkPasswordPolicy([data.password]);
        }
        if ('tfa_secret' in data) {
            throw new exceptions_1.InvalidPayloadException(`You can't change the "tfa_secret" value manually.`);
        }
        return await this.service.updateMany(keys, data, opts);
    }
    async updateByQuery(query, data, opts) {
        var _a;
        const email = (_a = data.email) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (email) {
            await this.checkUniqueEmails([email]);
        }
        if (data.password) {
            await this.checkPasswordPolicy([data.password]);
        }
        if ('tfa_secret' in data) {
            throw new exceptions_1.InvalidPayloadException(`You can't change the "tfa_secret" value manually.`);
        }
        return await this.service.updateByQuery(query, data, opts);
    }
    async deleteOne(key, opts) {
        // Make sure there's at least one admin user left after this deletion is done
        const otherAdminUsers = await this.knex
            .count('*', { as: 'count' })
            .from('directus_users')
            .whereNot('directus_users.id', key)
            .andWhere({ 'directus_roles.admin_access': true })
            .leftJoin('directus_roles', 'directus_users.role', 'directus_roles.id')
            .first();
        const otherAdminUsersCount = +((otherAdminUsers === null || otherAdminUsers === void 0 ? void 0 : otherAdminUsers.count) || 0);
        if (otherAdminUsersCount === 0) {
            throw new exceptions_1.UnprocessableEntityException(`You can't delete the last admin user.`);
        }
        await this.service.deleteOne(key, opts);
        return key;
    }
    async deleteMany(keys, opts) {
        // Make sure there's at least one admin user left after this deletion is done
        const otherAdminUsers = await this.knex
            .count('*', { as: 'count' })
            .from('directus_users')
            .whereNotIn('directus_users.id', keys)
            .andWhere({ 'directus_roles.admin_access': true })
            .leftJoin('directus_roles', 'directus_users.role', 'directus_roles.id')
            .first();
        const otherAdminUsersCount = +((otherAdminUsers === null || otherAdminUsers === void 0 ? void 0 : otherAdminUsers.count) || 0);
        if (otherAdminUsersCount === 0) {
            throw new exceptions_1.UnprocessableEntityException(`You can't delete the last admin user.`);
        }
        await this.service.deleteMany(keys, opts);
        return keys;
    }
    async inviteUser(email, role, url, subject) {
        const emails = to_array_1.toArray(email);
        const urlWhitelist = to_array_1.toArray(env_1.default.USER_INVITE_URL_ALLOW_LIST);
        if (url && urlWhitelist.includes(url) === false) {
            throw new exceptions_1.InvalidPayloadException(`Url "${url}" can't be used to invite users.`);
        }
        await this.knex.transaction(async (trx) => {
            const service = new items_1.ItemsService('directus_users', {
                schema: this.schema,
                accountability: this.accountability,
                knex: trx,
            });
            const mailService = new mail_1.MailService({
                schema: this.schema,
                accountability: this.accountability,
                knex: trx,
            });
            for (const email of emails) {
                await service.createOne({ email, role, status: 'invited' });
                const payload = { email, scope: 'invite' };
                const token = jsonwebtoken_1.default.sign(payload, env_1.default.SECRET, { expiresIn: '7d' });
                const inviteURL = url !== null && url !== void 0 ? url : env_1.default.PUBLIC_URL + '/admin/accept-invite';
                const acceptURL = inviteURL + '?token=' + token;
                const subjectLine = subject ? subject : "You've been invited";
                await mailService.send({
                    to: email,
                    subject: subjectLine,
                    template: {
                        name: 'user-invitation',
                        data: {
                            url: acceptURL,
                            email,
                        },
                    },
                });
            }
        });
    }
    async acceptInvite(token, password) {
        const { email, scope } = jsonwebtoken_1.default.verify(token, env_1.default.SECRET);
        if (scope !== 'invite')
            throw new exceptions_1.ForbiddenException();
        const user = await this.knex.select('id', 'status').from('directus_users').where({ email }).first();
        if (!user || user.status !== 'invited') {
            throw new exceptions_1.InvalidPayloadException(`Email address ${email} hasn't been invited.`);
        }
        const passwordHashed = await argon2_1.default.hash(password);
        await this.knex('directus_users').update({ password: passwordHashed, status: 'active' }).where({ id: user.id });
        if (cache_1.default && env_1.default.CACHE_AUTO_PURGE) {
            await cache_1.default.clear();
        }
    }
    async requestPasswordReset(email, url, subject) {
        const user = await this.knex.select('id').from('directus_users').where({ email }).first();
        if (!user)
            throw new exceptions_1.ForbiddenException();
        const mailService = new mail_1.MailService({
            schema: this.schema,
            knex: this.knex,
            accountability: this.accountability,
        });
        const payload = { email, scope: 'password-reset' };
        const token = jsonwebtoken_1.default.sign(payload, env_1.default.SECRET, { expiresIn: '1d' });
        const urlWhitelist = to_array_1.toArray(env_1.default.PASSWORD_RESET_URL_ALLOW_LIST);
        if (url && urlWhitelist.includes(url) === false) {
            throw new exceptions_1.InvalidPayloadException(`Url "${url}" can't be used to reset passwords.`);
        }
        const acceptURL = url ? `${url}?token=${token}` : `${env_1.default.PUBLIC_URL}/admin/reset-password?token=${token}`;
        const subjectLine = subject ? subject : 'Password Reset Request';
        await mailService.send({
            to: email,
            subject: subjectLine,
            template: {
                name: 'password-reset',
                data: {
                    url: acceptURL,
                    email,
                },
            },
        });
    }
    async resetPassword(token, password) {
        const { email, scope } = jsonwebtoken_1.default.verify(token, env_1.default.SECRET);
        if (scope !== 'password-reset')
            throw new exceptions_1.ForbiddenException();
        const user = await this.knex.select('id', 'status').from('directus_users').where({ email }).first();
        if (!user || user.status !== 'active') {
            throw new exceptions_1.ForbiddenException();
        }
        const passwordHashed = await argon2_1.default.hash(password);
        await this.knex('directus_users').update({ password: passwordHashed, status: 'active' }).where({ id: user.id });
        if (cache_1.default && env_1.default.CACHE_AUTO_PURGE) {
            await cache_1.default.clear();
        }
    }
    async enableTFA(pk) {
        const user = await this.knex.select('tfa_secret').from('directus_users').where({ id: pk }).first();
        if ((user === null || user === void 0 ? void 0 : user.tfa_secret) !== null) {
            throw new exceptions_1.InvalidPayloadException('TFA Secret is already set for this user');
        }
        const authService = new authentication_1.AuthenticationService({
            knex: this.knex,
            schema: this.schema,
            accountability: this.accountability,
        });
        const secret = authService.generateTFASecret();
        await this.knex('directus_users').update({ tfa_secret: secret }).where({ id: pk });
        return {
            secret,
            url: await authService.generateOTPAuthURL(pk, secret),
        };
    }
    async disableTFA(pk) {
        await this.knex('directus_users').update({ tfa_secret: null }).where({ id: pk });
    }
    async create(data) {
        logger_1.default.warn('UsersService.create is deprecated and will be removed before v9.0.0. Use createOne or createMany instead.');
        if (Array.isArray(data))
            return this.createMany(data);
        return this.createOne(data);
    }
    async update(data, key) {
        if (Array.isArray(key))
            return await this.updateMany(key, data);
        else if (key)
            await this.updateOne(key, data);
        const primaryKeyField = this.schema.collections[this.collection].primary;
        const keys = [];
        await this.knex.transaction(async (trx) => {
            const itemsService = new items_1.ItemsService(this.collection, {
                accountability: this.accountability,
                knex: trx,
                schema: this.schema,
            });
            const payloads = to_array_1.toArray(data);
            for (const single of payloads) {
                const payload = lodash_1.clone(single);
                const key = payload[primaryKeyField];
                if (!key) {
                    throw new exceptions_1.InvalidPayloadException('Primary key is missing in update payload.');
                }
                keys.push(key);
                await itemsService.updateOne(key, payload);
            }
        });
        return keys;
    }
    async delete(key) {
        if (Array.isArray(key))
            return await this.deleteMany(key);
        return await this.deleteOne(key);
    }
}
exports.UsersService = UsersService;
