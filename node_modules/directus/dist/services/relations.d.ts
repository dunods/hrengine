import { AbstractServiceOptions, PermissionsAction, PrimaryKey, Query, Relation } from '../types';
import { ItemsService, QueryOptions } from './items';
import { PermissionsService } from './permissions';
export declare class RelationsService extends ItemsService {
    permissionsService: PermissionsService;
    constructor(options: AbstractServiceOptions);
    /**
     * Read multiple relations by query.
     *
     * Note: this is based on permissions access to other collections/fields, not permissions to
     * directus_relations directly
     */
    readByQuery(query: Query, opts?: QueryOptions): Promise<Relation[]>;
    /**
     * Get a single relations row by key. This is based on your permissions to the collections/fields
     * involved in the relation, not permissions to directus_relations
     */
    readOne(key: PrimaryKey, query?: Query, opts?: QueryOptions): Promise<Relation>;
    /**
     * Get a single relations row by key. This is based on your permissions to the collections/fields
     * involved in the relation, not permissions to directus_relations
     */
    readMany(keys: PrimaryKey[], query?: Query, opts?: QueryOptions): Promise<Relation[]>;
    /**
     * Loop over all relations and filter out the ones that contain collections/fields you don't have
     * permissions to
     */
    private filterForbidden;
    /**
     * @deprecated Use `readOne` or `readMany` instead
     */
    readByKey(keys: PrimaryKey[], query?: Query, action?: PermissionsAction): Promise<Relation[]>;
    readByKey(key: PrimaryKey, query?: Query, action?: PermissionsAction): Promise<Relation>;
}
